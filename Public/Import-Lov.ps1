<#
.SYNOPSIS
    Import a tab-delimited, list-of-value for the specified parameter.  Supports file format that is generated when a list-of-values is exported from parameter.

.DESCRIPTION
.NOTES
.LINK
.EXAMPLE
.INPUTTYPE
.RETURNVALUE
.COMPONENT
.ROLE
.FUNCTIONALITY
.PARAMETER
#>

function Import-Lov {

	[cmdletbinding()]
	param (
		[Parameter(ValueFromPipeline=$true,Position=0,Mandatory=$true)][CrystalDecisions.CrystalReports.Engine.ReportDocument]$reportDocument,
		[Parameter(Mandatory=$true)][string]$path,
		[Parameter(Mandatory=$true)][string]$paramName
	)

	begin {Write-Verbose "$($MyInvocation.MyCommand.Name)::Begin"}
	process {

		try {

			# get parameter
			$parameterField = $reportDocument.dataDefinition.parameterFields[$paramName]

			# get list of values
			$t = Import-Csv -Delimiter "`t" -Path $path -Header "key","value"

			$values = @()
			foreach($r in $t)
			{
				# ignore empty rows and header row (generated by the Export... feature)
				if ($r.key -and ($r.key -notlike '%%%%ShowDescOnly*')) {

					$kv=@{}
					$kv["key"] = $r.key
					$kv["value"] = $r.value

					$values += $kv
				}
			}
			#$values

			if ($values) {

                $defaultValues = $parameterField.DefaultValues
				# clear values from parameter
                $defaultValues.Clear | Out-Null

				foreach($kv in $values) {
                    #$rangeValue = New-Object CrystalReports.Shared.ParameterRangeValue
					$discreteValue = New-Object CrystalDecisions.Shared.ParameterDiscreteValue
                    $discreteValue.Value = $kv["key"]
                    $discreteValue.Description = $kv["value"]
					$defaultValues.Add($discreteValue) | Out-Null
				}

                $parameterField.ApplyDefaultValues($defaultValues)
			}

		}
	    catch [Exception] {
	        write-host $_.Exception
	    }
        return $reportDocument

	} # process
	end {Write-Verbose "$($MyInvocation.MyCommand.Name)::End"}

}
